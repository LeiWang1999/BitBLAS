[08:25:52] /home/t-leiwang/mlc_workspace/unity/src/tir/schedule/primitive/blockize_tensorize.cc:781: Tensorize before BlockizeImpl: ax0_0 = T.int32()
ax0_1 = T.int32()
ax0 = T.int32()
ax1_0 = T.int32()
ax1_1 = T.int32()
ax1 = T.int32()
with T.block("B_decode_local"):
    v0 = T.axis.spatial(16384, ax0_0 * 2 + ax0_1 + ax0)
    v1 = T.axis.spatial(16384, ax1_0 * 512 + ax1_1 * 8 + ax1)
    B_local = T.Buffer((16384, 2048), "int32", scope="local")
    T.reads(B_local[v0, v1 // 8])
    B_decode_local = T.Buffer((16384, 16384), "float16", scope="local")
    T.writes(B_decode_local[v0, v1])
    B_decode_local[v0, v1] = T.Cast("float16", T.shift_right(T.shift_left(T.bitwise_and(T.shift_right(B_local[v0, v1 // 8], v1 % 8 * 4), 15), 28), 28))
[08:25:52] /home/t-leiwang/mlc_workspace/unity/src/tir/schedule/primitive/blockize_tensorize.cc:783: Tensorize: ax0_0 = T.int32()
ax0_1 = T.int32()
ax0 = T.int32()
ax1_0 = T.int32()
ax1_1 = T.int32()
with T.block("B_decode_local_o"):
    v0_o = T.axis.spatial(16384, ax0_0 * 2 + ax0_1 + ax0)
    v1_o = T.axis.spatial(2048, ax1_0 * 64 + ax1_1)
    B_local = T.Buffer((16384, 2048), "int32", scope="local")
    T.reads(B_local[v0_o, v1_o])
    B_decode_local = T.Buffer((16384, 16384), "float16", scope="local")
    T.writes(B_decode_local[v0_o, v1_o * 8:v1_o * 8 + 8])
    for ax1 in range(8):
        with T.block("B_decode_local"):
            v1_i = T.axis.spatial(8, ax1)
            T.reads(B_local[v0_o, v1_o])
            T.writes(B_decode_local[v0_o, v1_o * 8 + v1_i])
            B_decode_local[v0_o, v1_o * 8 + v1_i] = T.Cast("float16", T.shift_right(T.shift_left(T.bitwise_and(T.shift_right(B_local[v0_o, v1_o], v1_i * 4), 15), 28), 28))
[08:25:52] /home/t-leiwang/mlc_workspace/unity/src/tir/schedule/primitive/blockize_tensorize.cc:762: TensorIntrinSimplifier VisitStmt_: with T.block("root", no_realize=True):
    Compressed = T.Buffer((1,), "int32", scope="local")
    T.reads(Compressed[0])
    Decompressed = T.Buffer((8,), "float16", scope="local")
    T.writes(Decompressed[0:8])
    for i in range(8):
        with T.block("decode"):
            vi = T.axis.spatial(8, i)
            T.reads(Compressed[vi // 8])
            T.writes(Decompressed[vi])
            Decompressed[vi] = T.Cast("float16", T.shift_right(T.shift_left(T.bitwise_and(T.shift_right(Compressed[vi // 8], vi % 8 * 4), 15), 28), 28))
[08:25:52] /home/t-leiwang/mlc_workspace/unity/src/tir/schedule/primitive/blockize_tensorize.cc:763: Simplified: with T.block("root", no_realize=True):
    Compressed = T.Buffer((1,), "int32", scope="local")
    T.reads(Compressed[0])
    Decompressed = T.Buffer((8,), "float16", scope="local")
    T.writes(Decompressed[0:8])
    for i in range(8):
        with T.block("decode"):
            vi = T.axis.spatial(8, i)
            T.reads(Compressed[0])
            T.writes(Decompressed[vi])
            Decompressed[vi] = T.Cast("float16", T.shift_right(T.shift_left(T.bitwise_and(T.shift_right(Compressed[0], vi * 4), 15), 28), 28))
[WARNING] Cannot find the appropriate index map for tensorcore
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1, 16384), "float16"), B: T.Buffer((16384, 2048), "int32"), D: T.Buffer((1, 16384), "float16")):
        T.func_attr({"dequantize_info": {"B": {"decode_block": "B_decode", "fast_decoding": T.bool(True), "group_size": 16384, "source_format": {"bits": 4, "format": "uint"}, "storage_dtype": "int32", "target_format": "float16", "with_scaling": T.bool(False)}}, "tir.noalias": T.bool(True)})
        # with T.block("root"):
        B_decode_local = T.alloc_buffer((16384, 16384), "float16", scope="local")
        A_local = T.alloc_buffer((1, 16384), "float16", scope="local")
        B_local = T.alloc_buffer((16384, 2048), "int32", scope="local")
        C_local = T.alloc_buffer((1, 16384), "float16", scope="local")
        for ax0_0 in T.thread_binding(8192, thread="blockIdx.x"):
            for ax0_1 in T.thread_binding(2, thread="threadIdx.y"):
                for ax1_0 in range(32):
                    for ax1_1 in T.thread_binding(64, thread="threadIdx.x"):
                        for ax0 in range(1):
                            for ax1 in T.vectorized(1):
                                with T.block("B_local"):
                                    v0 = T.axis.spatial(16384, ax0_0 * 2 + ax0_1 + ax0)
                                    v1 = T.axis.spatial(2048, ax1_0 * 64 + ax1_1 + ax1)
                                    T.reads(B[v0, v1])
                                    T.writes(B_local[v0, v1])
                                    B_local[v0, v1] = B[v0, v1]
                        for ax0 in range(1):
                            with T.block("B_decode_local_o"):
                                v0_o = T.axis.spatial(16384, ax0_0 * 2 + ax0_1 + ax0)
                                v1_o = T.axis.spatial(2048, ax1_0 * 64 + ax1_1)
                                T.reads(B_local[v0_o, v1_o])
                                T.writes(B_decode_local[v0_o, v1_o * 8:v1_o * 8 + 8])
                                Compressed = T.match_buffer(B_local[v0_o, v1_o], (1,), "int32", scope="local")
                                Decompressed = T.match_buffer(B_decode_local[v0_o, v1_o * 8:v1_o * 8 + 8], (8,), "float16", scope="local")
                                T.call_extern("handle", "decode_i4s_to_f16", Compressed.data, Decompressed.data, 8)
                        for ax0 in range(1):
                            for ax1 in T.vectorized(8):
                                with T.block("A_local"):
                                    v0 = T.axis.spatial(1, ax0)
                                    v1 = T.axis.spatial(16384, ax1_0 * 512 + ax1_1 * 8 + ax1)
                                    T.reads(A[v0, v1])
                                    T.writes(A_local[v0, v1])
                                    A_local[v0, v1] = A[v0, v1]
                        for ax1_2 in range(8):
                            with T.block("C"):
                                v0 = T.axis.spatial(16384, ax0_0 * 2 + ax0_1)
                                v1 = T.axis.reduce(16384, ax1_0 * 512 + ax1_1 * 8 + ax1_2)
                                T.reads(A_local[0, v1], B_decode_local[v0, v1])
                                T.writes(C_local[0, v0])
                                T.block_attr({"pragma_import_c": metadata["runtime.String"][0]})
                                with T.init():
                                    C_local[0, v0] = T.float16(0)
                                C_local[0, v0] = C_local[0, v0] + A_local[0, v1] * B_decode_local[v0, v1]
                for ax0, ax1 in T.grid(1, 1):
                    with T.block("C_local"):
                        v0 = T.axis.spatial(1, ax0)
                        v1 = T.axis.spatial(16384, ax0_0 * 2 + ax0_1 + ax1)
                        T.reads(C_local[v0, v1])
                        T.writes(D[0, v1])
                        D[0, v1] = C_local[v0, v1]

# Metadata omitted. Use show_meta=True in script() method to show it.
